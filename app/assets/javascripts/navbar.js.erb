<% url = Rails.application.routes.url_helpers %>
if (typeof window.evefits !== 'object') {
  window.evefits = {
    extend: function(options) { return $.extend(true, window.evefits, options) }
  };
}

window.evefits.extend({
  navbar: {}
});

evefits.navbar = function(){
  var _viewModel = function(){
    var self = this;
    self.characters = ko.observableArray();
    self.defaultCharacter = ko.observable();
    self.loading = ko.observable();
  };

  var _Character = function(args){
    var self = this;
    self.characterName = ko.observable(args.characterName);
    self.corporationName = ko.observable(args.corporationName);
    self.characterID = ko.observable(args.characterID);
    self.corporationID = ko.observable(args.corporationID);
    self.avatar = ko.computed(function(){
      return "http://image.eveonline.com/character/"+self.characterID()+"_128.jpg";
    });
    self.makeDefault = function(){
      $.ajax({
        url: '<%= url.characters_path %>/'+self.characterID()+'/set_default',
        dataType: 'json',
        type: 'POST'
      }).done(function(data){
        if(data.status && data.status === 'ok'){
          _nav.defaultCharacter(self);
          _defaultCharacter();
        }
      });
    };
    self.updateSkills = function(){
      var _value = 1;
      var _notice = $.pnotify({
        title: "Updateing skills for "+self.characterName(),
        text: "<div class=\"progress progress-striped active\" ><div class=\"bar\"></div></div> ",
        type: 'info',
        icon: 'picon picon-throbber',
        history: false,
        hide: false,
        width: '400px',
        before_open: function(pnotify) {
          var bar = pnotify.find("div.progress div.bar");
          bar.width(_value+'%');
          var timer = setInterval(function() {
            if (_value >= 100) {
              bar.width('100%');
              window.clearInterval(timer);
              return;
            }
            _value += .3;
            bar.width(_value+'%');
          }, 2);
        }
      });
      _notice.pnotify();
      $.ajax({
        url: '<%= url.skills_path %>/'+self.characterID()+'/import',
        dataType: 'json',
        type: 'GET'
      }).then(function(data){
        _value = 100;
      }).done(function(data){
        setTimeout(function(){
          _notice.fadeOut(function(){
            $(this).remove();
          });
        },500);
      });
      return false;
    };
  };

  var _getCharacters = function(){
    $.ajax({
      url: '<%= url.characters_path %>',
      dataType: 'json',
      type: 'GET'
    }).done(function(data){
      _nav.characters.removeAll();
      for (var i = 0; i < data.length; i++) {
       _nav.characters.push(new _Character(data[i]));
      };
    });
  };

  var _defaultCharacter = function(){
    $.ajax({
      url: '<%= url.default_characters_path %>',
      dataType: 'json',
      type: 'GET'
    }).done(function(data){
      _nav.defaultCharacter(false);
      ko.utils.arrayFirst(_nav.characters(), function(character){
        if(character.characterID() === data.characterID){
          _nav.defaultCharacter(character);
        }
      });
    });
  };

  var _Spinner = function(){
    var self = this;
    var opts = {
      lines: 11, // The number of lines to draw
      length: 5, // The length of each line
      width: 2, // The line thickness
      radius: 5, // The radius of the inner circle
      corners: 1, // Corner roundness (0..1)
      rotate: 0, // The rotation offset
      direction: 1, // 1: clockwise, -1: counterclockwise
      color: '#fff', // #rgb or #rrggbb
      speed: 1, // Rounds per second
      trail: 60, // Afterglow percentage
      shadow: true, // Whether to render a shadow
      hwaccel: false, // Whether to use hardware acceleration
      className: 'spinner', // The CSS class to assign to the spinner
      zIndex: 2e9, // The z-index (defaults to 2000000000)
      top: 'auto', // Top position relative to parent in px
      left: 'auto' // Left position relative to parent in px
    };
    var spinner = new Spinner(opts);

    self.start = function(){
      spinner.spin(document.getElementById('spinner'));
    };
    self.stop = function(){
      spinner.stop();
    };
  };

  var _init = function(args){
    ko.applyBindings(_nav, document.getElementById("nav"));
    _getCharacters();
    _defaultCharacter();
  };

  var _nav = new _viewModel();
  var _spinner = new _Spinner();

  return {init:_init,
          spinner:_spinner};
}();