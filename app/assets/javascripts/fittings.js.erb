<% url = Rails.application.routes.url_helpers %>
if (typeof window.evefits !== 'object') {
  window.evefits = {
    extend: function(options) { return $.extend(true, window.evefits, options) }
  };
}

window.evefits.extend({
  fittings: {
    list: {},
    create: {},
    edit: {},
    show: {}
  }
});

evefits.fittings.list = function(){
  var _viewModel = function(){
    var self = this;
    self.fittings = ko.observableArray();
    self.header = ko.computed(function(){
      if(self.fittings().length === 1){
        return '1 Fitting';
      } else {
        return self.fittings().length + ' Fittings';
      }
    });
  };

  var _Fitting = function(args){
    var self = this;
    self.name = ko.observable(args.name);
    self.shipId = ko.observable(args.ship_id);
    self.ship = ko.observable(args.ship);
    self.url = ko.computed(function(){
      return window.location.href+'/'+args.id;
    });
    self.image = ko.computed(function(){
      return window.location.origin+'/assets/ships/'+self.shipId()+'.png';
    });
  };


  var _list = new _viewModel();

  var _init = function(){
    ko.applyBindings(_list);

    $.ajax({
      url: window.document.location,
      dataType: 'jsonp',
      jsonpCallback: 'fittings',
      crossDomain: true,
      success: function(data) {
        for (var i = 0; i < data.fitting.length; i++) {
          _list.fittings.push(new _Fitting(data.fitting[i]));
        }
      }
    });
  };

  return {init:_init}
}();

evefits.fittings.create = function(){
  var _viewModel = function(){
    var self = this;
    self.groups = ko.observableArray();
    self.selectedShip = ko.observable();
    self.selectShip = function(element){
      self.selectedShip(element);
    };
  };

  var _Group = function(arg1){
    var self = this;
    self.name = ko.observable(arg1);
    self.ships = ko.observableArray();
  };

  var _Ship = function(args){
    var self = this;
    self.id = ko.observable(args.typeID);
    self.group = ko.observable(args.groupName);
    self.name = ko.observable(args.typeName);
    self.description = ko.observable(args.description);
    self.mass = ko.observable(args.mass);
    self.volume = ko.observable(args.volume);
    self.capacity = ko.observable(args.capacity);
    self.race = ko.observable(args.raceName);
    self.basePrice = ko.observable(args.basePrice);
    self.image = ko.computed(function(){
      return window.location.origin+'/assets/ships/'+self.id()+'.png';
    });
  };

  var _create = new _viewModel();

  var _init = function(){
    ko.applyBindings(_create);

    $.ajax({
      url: '<%= url.api_ships_path %>',
      dataType: 'jsonp',
      jsonpCallback: 'ships',
      crossDomain: true,
      success: function(data) {
        for (var i = data.ships.length - 1; i >= 0; i--) {
          var ship = new _Ship(data.ships[i]);
          var groupExist = ko.utils.arrayFirst(_create.groups(), function(group){
            return (group.name() === ship.group());
          });
          if(!groupExist){
            var group = new _Group(ship.group());
            group.ships.push(ship);
            _create.groups.push(group);
          } else {
            groupExist.ships.push(ship);
          }
        }
      }
    });
  };

  return {init:_init}
}();

evefits.fittings.edit = function(){}();

evefits.fittings.show = function(){
  var _viewModel = function(){
    var self = this;
    self.name = ko.observable();
    self.ship = ko.observable();
    self.modules = ko.observableArray();
    self.marketGroups = ko.observableArray();
    self.selectedMarketGroup = ko.observable();
    self.selectMarketGroup = function(element){
      self.selectedMarketGroup(element);
    };
    self.backMarketGroup = function(){
      self.selectedMarketGroup(false);
    };
    self.addModule = function(element){
      ko.utils.arrayFirst(self.ship().slots(), function(slot){
        if(element.slot().toLowerCase() === slot.name().toLowerCase()){
          if(slot.modules().length < slot.max()){
            slot.addModule(element);
          }
        }
      });
    };
  };

  var _Ship = function(args){
    var self = this;
    /* UI stuff */
    self.slots = ko.observableArray();
    self.hasAttributes = ko.observable(false);
    self.attributes = ko.observableArray();

    /* Basic attributes */
    self.id = ko.observable(args.typeID);
    self.group = ko.observable(args.groupName);
    self.name = ko.observable(args.typeName);
    self.description = ko.observable(args.description);
    self.mass = ko.observable(args.mass);
    self.volume = ko.observable(args.volume);
    self.capacity = ko.observable(args.capacity);
    self.race = ko.observable(args.raceName);
    self.basePrice = ko.observable(args.basePrice);

    /*  */
    self.powerGrid = ko.observable(0);
    self.powerGridUsed = ko.observable(0);
    self.cpu = ko.observable(0);
    self.cpuUsed = ko.observable(0);
    self.droneBay = ko.observable(0);
    self.droneBayUsed = ko.observable(0);
    self.droneBandwidth = ko.observable(0);
    self.droneBandwidthUsed = ko.observable(0);

    /* Offense attributes */
    self.turretDps = ko.observable(0);
    self.missleDps = ko.observable(0);
    self.droneDps = ko.observable(0);
    self.dps = ko.computed(function(){
      return (self.turretDps() + self.missleDps() + self.droneDps());
    });
    self.volley = ko.observable(0);

    /* Defence attributes */
    self.shieldHp = ko.observable(0);
    self.shieldEM = ko.observable(0);
    self.shieldThermal = ko.observable(0);
    self.shieldKinetic = ko.observable(0);
    self.shieldExsplosive = ko.observable(0);
    self.armorHp = ko.observable(0);
    self.armorEM = ko.observable(0);
    self.armorThermal = ko.observable(0);
    self.armorKinetic = ko.observable(0);
    self.armorExsplosive = ko.observable(0);
    self.hullHp = ko.observable(0);
    self.hullEM = ko.observable(0);
    self.hullThermal = ko.observable(0);
    self.hullKinetic = ko.observable(0);
    self.hullExsplosive = ko.observable(0);
    self.ehp = ko.observable(0);
    self.totalHp = ko.computed(function(){
      return (self.shieldHp() + self.armorHp() + self.hullHp());
    });

    /* Capacitor attributes */
    self.capacitor = ko.observable();
    self.rechargeRate = ko.observable();

    self.image = ko.computed(function(){
      return window.location.origin+'/assets/ships/'+self.id()+'.png';
    });
    self.getAttributes = function(){
      if(self.attributes().length === 0){
        $.when(_getShipAttributes(self)).done(self.hasAttributes(true));
      }
    };

    if(self.id()){
      $.ajax({
        url: '<%= url.api_ships_path %>/'+self.id(),
        dataType: 'jsonp',
        jsonpCallback: 'fitting',
        crossDomain: true,
        success: function(data) {
          for (var i = 0; i < data.length; i++) {
            self.slots.unshift(new _Slots(data[i]));
          }
        }
      });
    }
  };

  var _Slots = function(args){
    var self = this;
    /* UI Stuff */
    self.name = ko.observable(args.attributename);
    self.max = ko.observable(args.value);
    self.slots = ko.observableArray();
    self.modules = ko.observableArray();

    /* Computed module attributes */
    self.powerGrid =  ko.observable(0);
    self.cpu = ko.observable(0);
    self.capacitor = ko.observable(0);

    for (var i = 0; i < self.max(); i++) {
      self.slots.push(new _Module({
        slot: self.name(),
        slotType: 'empty'
      }));
    }
    self.addModule = function(module){
      var freeSlot = ko.utils.arrayFirst(self.slots(), function(slot){
        return (slot.slotType() === 'empty');
      });
      if(freeSlot){
        module.getAttributes();
        self.slots.replace(freeSlot, module);
        self.modules.push(module);
      }
    };
    self.removeModule = function(module){
      //todo
    };
  };

  var _Module = function(args){
    var self = this;
    /* UI stuff */
    self.slot = ko.observable(args.hasOwnProperty('slot') ? args.slot : undefined);
    self.slotType = ko.observable(args.hasOwnProperty('slotType') ? args.slotType : undefined);
    self.icon = ko.observable();
    self.hasAttributes = ko.observable(false);

    /* Basic attributes */
    self.id = ko.observable(args.hasOwnProperty('id') ? args.id : undefined);
    self.slot = ko.observable(args.hasOwnProperty('slot') ? args.slot : undefined);
    self.name = ko.observable(args.hasOwnProperty('typeName') ? args.typeName : undefined);
    self.mass = ko.observable(args.hasOwnProperty('mass') ? args.mass : undefined);
    self.volume = ko.observable(args.hasOwnProperty('volume') ? args.volume : undefined);
    self.capacity = ko.observable(args.hasOwnProperty('capacity') ? args.capacity : undefined);
    self.description = ko.observable(args.hasOwnProperty('description') ? args.description : undefined);
    self.price = ko.observable(args.hasOwnProperty('basePrice') ? args.basePrice : undefined);

    /* Extended attributes */
    self.powerGrid = ko.observable();
    self.cpu = ko.observable();
    self.capacitor = ko.observable();
    self.maxRange = ko.observable();
    self.falloff = ko.observable();
    self.tracking = ko.observable();
    self.charge = ko.observable();
    self.attributes = ko.observableArray();

    self.getAttributes = function(){
      if(!self.hasAttributes()){
        $.when(_getModuleAttributes(self)).done(self.hasAttributes(true));
      }
    };

    /* Clean up slot types for modules */
    if(self.slotType() === 'module' && self.slot()){
      switch (self.slot().toLowerCase()) {
        case "lopower":
          self.slot('lowslots');
          break;
        case "medpower":
          self.slot('medslots');
          break;
        case "hipower":
          self.slot('hislots');
          break;
        case "rigslot":
          self.slot('rigslots');
          break;
      }
    }
    /* Clean up slot types for empty modules placeholders */
    if(self.slotType() === 'empty' && self.slot()){
      switch (self.slot().toLowerCase()) {
        case "lowslots":
          self.name('Low Slot');
          self.icon(window.location.origin+'/assets/items/8_64_9.png');
          break;
        case "medslots":
          self.name('Med Slot');
          self.icon(window.location.origin+'/assets/items/8_64_10.png');
          break;
        case "hislots":
          self.name('High Slot');
          self.icon(window.location.origin+'/assets/items/8_64_11.png');
          break;
        case "rigslots":
          self.name('Rig Slot');
          self.icon();
          break;
      }
    }
  };

  var _Group = function(args){
    var self = this;
    self.name = ko.observable(args.marketGroupName);
    self.icon = ko.observable(args.iconID);
    self.id = ko.observable(args.marketGroupID);
    self.marketGroups = ko.observableArray();
    self.modules = ko.observableArray();
    if(args.groups){
      for (var i = 0; i < args.groups.length; i++) {
        self.marketGroups.push(new _Group(args.groups[i]));
      }
    }
    _show.selectedMarketGroup.subscribe(function(value){
      if(value && self.modules().length === 0 && value === self){
        $.ajax({
          url: '<%= url.api_modules_path %>/'+self.id()+'/types',
          dataType: 'jsonp',
          jsonpCallback: 'types',
          crossDomain: true,
          success: function(data) {
            for (var i = 0; i < data.length; i++) {
              var module = data[i];
              module.slotType = 'module';
              self.modules.push(new _Module(module));
            }
          }
        });
      }
    });
  };

  /**
  * A attribute.
  * @class _Attribute
  * @constructor
  * @params {object} args The arguments for this attribute.
  */
  var _Attribute = function(args){
    var self = this;
    self.name = ko.observable(args.name);
    self.value = ko.observable(args.value);
    self.id = ko.observable(args.attributes.attributeID);
    self.category = ko.observable(args.attributes.categoryID);
    self.defaultValue = ko.observable(args.attributes.defaultValue);
    self.description = ko.observable(args.attributes.description);
    self.displayName = ko.observable(args.attributes.displayName);
    self.highIsGood = ko.observable(args.attributes.highIsGood);
    self.icon = ko.observable(args.attributes.iconID);
    self.stackable = ko.observable(args.attributes.stackable);
  };

  /**
  * Gets all the extended attributes for modules.
  * @method _getModuleAttributes
  * @async
  * @params {object} args The module constructor.
  */
  var _getModuleAttributes = function(args){
    var dfr = $.Deferred();
    $.ajax({
      url: '<%= url.api_modules_path %>/'+args.id(),
      dataType: 'jsonp',
      jsonpCallback: 'attributes',
      crossDomain: true,
      success: function(data) {
        for (var i = 0; i < data.length; i++) {
          var attribute = data[i];
          args.attributes.push(new _Attribute(attribute));
          if(attribute.name.toLowerCase() === 'cpu'){
            args.cpu(attribute.value);
          } else if(attribute.name.toLowerCase() === 'power'){
            args.powerGrid(attribute.value);
          } else if(attribute.name.toLowerCase() === 'capacitorneed'){
            args.capacitor(attribute.value);
          } else if(attribute.name.toLowerCase() === 'maxrange'){
            args.maxRange(attribute.value);
          } else if(attribute.name.toLowerCase() === 'falloff'){
            args.falloff(attribute.value);
          } else if(attribute.name.toLowerCase() === 'trackingspeed'){
            args.tracking(attribute.value);
          }
        };
        dfr.resolve();
      }
    });
    return dfr.promise();
  };

  /**
  * Gets all the extended attributes for ships.
  * @method _getShipAttributes
  * @async
  * @params {object} args The ship constructor.
  */
  var _getShipAttributes = function(args){
    return $.ajax({
      url: '<%= url.api_modules_path %>/'+args.id(),
      dataType: 'jsonp',
      jsonpCallback: 'attributes',
      crossDomain: true,
      success: function(data) {
        for (var i = 0; i < data.length; i++) {
          var attribute = data[i];
          args.attributes.push(new _Attribute(attribute));
          if(attribute.name.toLowerCase() === 'cpuoutput'){
            args.cpu(attribute.value);
          } else if(attribute.name.toLowerCase() === 'poweroutput'){
            args.powerGrid(attribute.value);
          } else if(attribute.name.toLowerCase() === 'capacitorcapacity'){
            args.capacitor(attribute.value);
          } else if(attribute.name.toLowerCase() === 'hp'){
            args.hullHp(attribute.value);
          } else if(attribute.name.toLowerCase() === 'rechargerate'){
            args.rechargeRate(attribute.value);
          } else if(attribute.name.toLowerCase() === 'dronecapacity'){
            args.droneBay(attribute.value);
          } else if(attribute.name.toLowerCase() === 'dronebandwidth'){
            args.droneBandwidth(attribute.value);
          } else if(attribute.name.toLowerCase() === 'shieldCapacity'){
            args.shieldHp(attribute.value);
          } else if(attribute.name.toLowerCase() === 'armorhp'){
            args.armorHp(attribute.value);
          }
        };
      }
    });
  };

  var _loadEnviromentData = function(){
    $.ajax({
      url: window.document.location,
      dataType: 'jsonp',
      jsonpCallback: 'fitting',
      crossDomain: true,
      success: function(data) {
        var ship = new _Ship(data.ship);
        ship.getAttributes();
        _show.name(data.name)
        _show.ship(ship);
      }
    });
    $.ajax({
      url: '<%= url.api_modules_path %>',
      dataType: 'jsonp',
      jsonpCallback: 'modules',
      crossDomain: true,
      success: function(data) {
        for (var i = 0; i < data.length; i++) {
          _show.marketGroups.push(new _Group(data[i]));
        };
      }
    });
  };

  ko.bindingHandlers.progress = {
    update: function(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
      var options = valueAccessor(),
      percent = (options.min / options.max * 100),
      progressLabel = $('<div />',{"class":"progress-label"}).text(Math.round(percent)+'%'),
      progressBar = $('<div />',{"class":"bar"}).attr({title:percent+'%'}).data({percent:percent}).css({width:percent});
      $(element).empty();
      $(element).append(progressLabel, progressBar);
      if(options && options.color){
        $(element).addClass(options.color);
      } else {
        if(percent > 100){
          $(element).removeClass('progress-green').addClass('progress-red');
        } else {
          $(element).removeClass('progress-red').addClass('progress-green');
        }
      }
    }
  };

  var _show = new _viewModel();

  var _init = function(){
    ko.applyBindings(_show);
    _loadEnviromentData();
  };

  return {init:_init,
          viewModel:_show}
}();